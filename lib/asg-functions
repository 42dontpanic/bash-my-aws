#!/bin/bash
#
# asg-functions

asgs() {
  # returns instance id's and the name tag.
  local asg_names=$(__bma_read_inputs $@)

  aws autoscaling describe-auto-scaling-groups                             \
    $([[ -n ${asg_names} ]] && echo --auto-scaling-group-names $asg_names) \
    --query "
      AutoScalingGroups[][
        AutoScalingGroupName,
        [Tags[?Key=='Name'].Value][0][0]
      ]"                                                                   \
    --output text                                                          |
  column -s$'\t' -t 
}

asg-capacity() {
  # returns min, desired and maximum capacities of autoscaling group
  local asg_names=$(__bma_read_inputs $@)
  [[ -z "$asg_names" ]] && __bma_usage "auto-scaling-group" && return 1

  aws autoscaling describe-auto-scaling-groups                             \
    $([[ -n ${asg_names} ]] && echo --auto-scaling-group-names $asg_names) \
    --query "
    AutoScalingGroups[][
        AutoScalingGroupName,
        MinSize,
        DesiredCapacity,
        MaxSize
    ]"                                                                     \
    --output text                                                          |
  column -s$'\t' -t 
}

asg-desired-size-set() {
  # sets the desired capacity of an autoscaling group
  local inputs=$(__bma_read_inputs $@)
  local capacity="$(echo ${inputs} | awk '{ print $NF }')"

  if [[ $(echo ${inputs} | wc -l) -ne 2 ]] ||
     [[ "${capacity}" =~ ^[^0-9]+$ ]]; then
    __bma_usage "auto-scaling-group capacity"
    return 1
  fi

  for asg in $inputs; do
    [[ ${asg} == ${capacity} ]] && continue
    aws autoscaling set-desired-capacity  \
      --auto-scaling-group-name ${asg}    \
      --desired-capacity ${capacity}
  done
}

asg-instances() {
  # returns instances of autoscaling group(s)
  local asg_names=$(__bma_read_inputs $@)
  [[ -z "$asg_names" ]] && __bma_usage "auto-scaling-group" && return 1

  aws autoscaling describe-auto-scaling-groups             \
    --auto-scaling-group-names $asg_names                  \
    --query "AutoScalingGroups[].Instances[].[InstanceId]" \
    --output text                                          |
  instances
}

asg-max-size-set() {
  # sets maximum size of autoscaling group(s)
  local inputs=$(__bma_read_inputs $@)
  local capacity="$(echo ${inputs} | awk '{ print $NF }')"

  if [[ $(echo "$inputs" | wc -l) -ne 2 ]] ||
     [[ "${capacity}" =~ ^[^0-9]+$ ]]; then
    __bma_usage "auto-scaling-group capacity"
    return 1
  fi

  for asg in $inputs; do
    [[ ${asg} == ${capacity} ]] && continue
    aws autoscaling update-auto-scaling-group   \
      --auto-scaling-group-name ${asg}          \
      --max-size ${capacity}
  done
}

asg-min-size-set() {
  # sets the minimum size of an autoscaling group
  local inputs=$(__bma_read_inputs $@)
  local capacity="$(echo ${inputs} | awk '{ print $NF }')"

  if [[ $(echo "$inputs" | wc -l) -ne 2 ]] ||
     [[ "$capacity" =~ ^[^0-9]+$ ]]; then
    __bma_usage "auto-scaling-group capacity"
    return 1
  fi

  for asg in $inputs; do
    [[ ${asg} == ${capacity} ]] && continue
    aws autoscaling update-auto-scaling-group   \
      --auto-scaling-group-name ${asg}          \
      --min-size ${capacity}
  done
}

asg-processes_suspended() {
  # returns the suspended processes of an autoscaling group
  # TODO: fix the output
  local asg_names=$(__bma_read_inputs $@)
  [[ -z "$asg_names" ]] && __bma_usage "auto-scaling-group" && return 1

  aws autoscaling describe-auto-scaling-groups \
    --auto-scaling-group-names $asg_names      \
    --query "
      AutoScalingGroups[][
        AutoScalingGroupName,
        SuspendedProcesses
      ]"                                       \
    --output text                              |
  column -s$'\t' -t 
}

asg-resume() {
  # resumes all processes of an autoscaling group
  local inputs=$(__bma_read_inputs $@)
  [[ -z "$inputs" ]] && __bma_usage "auto-scaling-group" && return 1
  for asg in $inputs; do
    aws autoscaling resume-processes --auto-scaling-group-name $asg
  done
}

asg-suspend() {
  # suspends all processes of an autoscaling group
  local inputs=$(__bma_read_inputs $@)
  [[ -z "$inputs" ]] && __bma_usage "auto-scaling-group" && return 1
  for asg in $inputs; do
    aws autoscaling suspend-processes --auto-scaling-group-name $asg
  done
}

asg-scaling-activities() {
  # show all scaling activities
  local inputs=$(__bma_read_inputs $@)
  [[ -z "$inputs" ]] && __bma_usage "auto-scaling-group" && return 1
  for asg in $inputs; do
    aws autoscaling describe-scaling-activities \
      --auto-scaling-group-name $asg            \
      --output json
  done
}

# vim: ft=sh
