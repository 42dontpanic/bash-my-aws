#!/bin/bash
#
# asg-functions

asgs() {
  # type: query
  # returns instance id's and the name tag.
  local inputs=$(__bma_read_inputs $@)

  local default_query='
    AutoScalingGroups[][
      {
        "AutoScalingGroupName": AutoScalingGroupName,
        "Name":       [Tags[?Key==`Name`].Value][0][0]
      }
    ][]
  '

  local asg_names=$(__bma_read_resources $inputs)
  local filters=$(__bma_read_switches $inputs | grep ^--filters | cut -d\  -f2-)
  local query=$(__bma_read_switches $inputs | grep ^--query | cut -d\  -f2-)
  local output=$(__bma_read_switches $inputs | grep ^--output | cut -d\  -f2-)
  [[ -z $query ]] && query=$default_query

  aws autoscaling describe-auto-scaling-groups                    \
    $([[ -n ${asg_names} ]] && echo --auto-scaling-group-names)   \
    $(for x in ${asg_names}; do echo $x; done)                    \
    $([[ -n ${filters} ]] && echo "--filters ${filters}")         \
    --query "${query}"                                            \
    --output ${output:-"text"}
}

asg-capacity() {
  local inputs=$(__bma_read_inputs $@)
  local query='
    AutoScalingGroups[][
      {
        "AutoScalingGroupName": AutoScalingGroupName,
        "MinSize": MinSize,
        "DesiredCapacity": DesiredCapacity,
        "MaxSize": MaxSize
      }
    ][]
  '

  asgs ${inputs} --query ${query}
}

asg-instances() {
  local inputs=$(__bma_read_inputs $@)
  [[ -z "$inputs" ]] && __bma_usage "auto-scaling-group" && return 1
  local asg_names=$(__bma_read_resources ${inputs})
  local filters="
    Name=tag-key,Values=aws:autoscaling:groupName
    Name=tag-value,Values=$(echo ${asg_names} | tr ' ' ',')
  "

  instances                             \
    --filters ${filters}                \
    $(__bma_read_switches ${inputs})
}

asg-processes_suspended() {
  # TODO: fix the output
  local inputs=$(__bma_read_inputs $@)
  local query='
    AutoScalingGroups[][
      {
        "AutoScalingGroupName": AutoScalingGroupName,
        "SuspendedProcesses": SuspendedProcesses
      }
    ][]
  '

  asgs ${inputs} --query ${query}
}

asg-resume() {
  local inputs=$(__bma_read_inputs $@)
  [[ -z "$inputs" ]] && __bma_usage "auto-scaling-group" && return 1
  for asg in $(__bma_read_resources ${inputs}); do
    aws autoscaling resume-processes --auto-scaling-group-name $asg
  done
}

asg-suspend() {
  local inputs=$(__bma_read_inputs $@)
  [[ -z "$inputs" ]] && __bma_usage "auto-scaling-group" && return 1
  for asg in $(__bma_read_resources ${inputs}); do
    aws autoscaling suspend-processes --auto-scaling-group-name $asg
  done
}

asg-desired-size-set() {
  local inputs=$(__bma_read_inputs $@)
  __bma_read_switches ${inputs}
  local capacity="$(echo ${inputs} | awk '{ print $NF }')"

  if [[ $(__bma_read_resources ${inputs} | wc -l) -ne 2 ]] ||
     [[ "${capacity}" =~ ^[^0-9]+$ ]]; then
    __bma_usage "auto-scaling-group capacity"
    return 1
  fi

  for asg in $(__bma_read_resources ${inputs}); do
    [[ ${asg} == ${capacity} ]] && continue
    aws autoscaling set-desired-capacity  \
      --auto-scaling-group-name ${asg}    \
      --desired-capacity ${capacity}
  done
  return ${BMA_STATUS}
}

asg-min-size-set() {
  local inputs=$(__bma_read_inputs $@)
  __bma_read_switches ${inputs}
  local capacity="$(echo ${inputs} | awk '{ print $NF }')"

  if [[ $(__bma_read_resources ${inputs} | wc -l) -ne 2 ]] ||
     [[ "${capacity}" =~ ^[^0-9]+$ ]]; then
    __bma_usage "auto-scaling-group capacity"
    return 1
  fi

  for asg in $(__bma_read_resources ${inputs}); do
    [[ ${asg} == ${capacity} ]] && continue
    aws autoscaling update-auto-scaling-group   \
      --auto-scaling-group-name ${asg}          \
      --min-size ${capacity}
  done
  return ${BMA_STATUS}
}

asg-max-size-set() {
  local inputs=$(__bma_read_inputs $@)
  __bma_read_switches ${inputs}
  local capacity="$(echo ${inputs} | awk '{ print $NF }')"

  if [[ $(__bma_read_resources ${inputs} | wc -l) -ne 2 ]] ||
     [[ "${capacity}" =~ ^[^0-9]+$ ]]; then
    __bma_usage "auto-scaling-group capacity"
    return 1
  fi

  for asg in $(__bma_read_resources ${inputs}); do
    [[ ${asg} == ${capacity} ]] && continue
    aws autoscaling update-auto-scaling-group   \
      --auto-scaling-group-name ${asg}          \
      --max-size ${capacity}
  done
  return ${BMA_STATUS}
}

# vim: ft=sh
